
package medimage.views;

import java.awt.image.BufferedImage;
import medimage.Command;
import medimage.models.Image;
import medimage.models.Study;
import medimage.views.improvedimageview.ImageView;

/**
 * Dialog for doing windowing operations.
 * @author col32
 */
public class WindowingOptionsView extends javax.swing.JDialog {
    /**
     * Clamps a value between two integers.
     * @param v
     * @param lower
     * @param higher
     * @return 
     */
    private static int clamp(int v, int lower, int higher) {
        return Math.min(Math.max(v, lower), higher);
    }
    
    private final ImageView imgView;
    
    public static class WindowingCommand extends Command {
        private final int lower, higher;

        public WindowingCommand(int lower, int higher) {
            this.lower = lower;
            this.higher = higher;
        }
        
        private int scale(int color) {
            double slope = 255.0/(higher-lower);
            return clamp((int)(slope*color-slope*lower), 0, 255);
        }
        
        @Override
        public void apply(ImageView view, Study study) {
            for(Image i : study.getImages()) {
                BufferedImage origImg = i.getImageData();
                BufferedImage img = new BufferedImage(origImg.getColorModel(), origImg.copyData(null), origImg.isAlphaPremultiplied(), null);
                for(int x=0; x<img.getWidth(); x++)
                    for(int y=0; y<img.getHeight(); y++) {
                        int color = origImg.getRGB(x, y);
                        int newColor = scale(color & 0xff) |
                                (scale((color >> 8) & 0xff) << 8) |
                                (scale((color >> 16) & 0xff) << 16) |
                                ((color << 24) & 0xff);
                        img.setRGB(x, y, newColor);
                    }
                i.pushModifiedImage(img);
            }
            view.updateImageUI();
        }

        @Override
        public void undo(ImageView view, Study study) {
            for(Image i : study.getImages())
                i.popModifiedImage();
            view.updateImageUI();
        }

        @Override
        public int hashCode() {
            int hash = 5;
            hash = 61 * hash + this.lower;
            hash = 61 * hash + this.higher;
            return hash;
        }

        @Override
        public boolean equals(Object obj) {
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final WindowingCommand other = (WindowingCommand) obj;
            if (this.lower != other.lower) {
                return false;
            }
            return this.higher == other.higher;
        }
    }
    
    /**
     * Creates new form WindowingOptionsView
     * @param imgView
     */
    public WindowingOptionsView(ImageView imgView) {
        super(imgView, true);
        initComponents();
        this.imgView = imgView;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.JLabel label = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        javax.swing.JLabel label2 = new javax.swing.JLabel();
        upperBoundSlider = new javax.swing.JSlider();
        javax.swing.JLabel label3 = new javax.swing.JLabel();
        lowerBoundSlider = new javax.swing.JSlider();
        executeButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        label.setText("Windowing Parameters:");

        jPanel1.setLayout(new java.awt.GridLayout(2, 2));

        label2.setText("Upper Bound");
        jPanel1.add(label2);

        upperBoundSlider.setMaximum(255);
        upperBoundSlider.setValue(255);
        jPanel1.add(upperBoundSlider);

        label3.setText("Lower Bound");
        jPanel1.add(label3);

        lowerBoundSlider.setMaximum(255);
        lowerBoundSlider.setValue(0);
        jPanel1.add(lowerBoundSlider);

        executeButton.setText("Execute");
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(backButton)
                        .addGap(18, 18, 18)
                        .addComponent(executeButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(executeButton)
                    .addComponent(backButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed
        imgView.addCommand(new WindowingCommand(lowerBoundSlider.getValue(), upperBoundSlider.getValue()));
        this.dispose();
    }//GEN-LAST:event_executeButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton executeButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSlider lowerBoundSlider;
    private javax.swing.JSlider upperBoundSlider;
    // End of variables declaration//GEN-END:variables
}
