/**
 * File: StudiesView.java
 * Description: The view for selecting which study to open.
 */

package medimage.views;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.List;
import javax.swing.event.TreeModelListener;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import medimage.MedImage;
import medimage.models.Connection;
import medimage.models.DisplayState;
import medimage.models.Study;
import medimage.models.local.LocalConnection;

/**
 * View for listing all the studies of a connection.
 * @author col32
 */
public class StudiesView extends javax.swing.JFrame {
    
    /**
     * Studies -> TreeModel adapter
     */
    private class StudiesTreeModel implements TreeModel {
        @Override
        public Object getRoot() {
            return "Root";
        }
        
        private List<Study> get(Object parent) {
            if(parent.equals("Root"))
                return connection.getStudies();
            return ((Study)parent).getStudies();
        }

        @Override
        public Object getChild(Object parent, int index) {
            return get(parent).get(index);
        }

        @Override
        public int getChildCount(Object parent) {
            return get(parent).size();
        }

        @Override
        public boolean isLeaf(Object node) {
            return get(node).isEmpty();
        }

        @Override
        public void valueForPathChanged(TreePath path, Object newValue) {
            // Don't need this
        }

        @Override
        public int getIndexOfChild(Object parent, Object child) {
            return get(parent).indexOf(child);
        }

        @Override
        public void addTreeModelListener(TreeModelListener l) {
            // Don't need this
        }

        @Override
        public void removeTreeModelListener(TreeModelListener l) {
            // Don't need this
        }
    }
    
    private Connection connection;
    
    /**
     * Creates new form StudiesView
     */
    public StudiesView() {
        initComponents();
    }
    
    /**
     * Updates the UI to view a list of studies and makes the frame visible.
     * @param connection Connection to get studies from.
     */
    public void viewStudies(Connection connection) {
        this.viewStudies(connection, false);
    }
    
    /**
     * Updates the UI to view a list of studies and makes the frame visible.
     * @param connection Connection to get studies from.
     * @param dontLoadDefault Set to true to prevent loading of the default study.
     */
    public void viewStudies(Connection connection, boolean dontLoadDefault)
    {
        this.connection = connection;
        
        // Check for default study
        Study deflt = connection.getDefaultStudy();
        if(!dontLoadDefault && deflt != null)
            // Load default study instead
            this.loadStudy(deflt);
        else
        {
            // Show study picker
            this.updateStudiesUI();
            this.setVisible(true);
        }
    }
    
    /**
     * Refreshes the studies list.
     */
    private void updateStudiesUI() {
        this.studiesList.setModel(new StudiesTreeModel());
    }
    
    /**
     * Views a study. Loads the display state and transitions to the appropriate
     * image view.
     * @param study Study to view.
     */
    private void loadStudy(Study study) {
        // Do nothing if nothing selected.
        if(study == null)
            return;
        
        // Get previous display state.
        DisplayState state = study.getDisplayState();
        
        if(state == null) // No previous display state
            MedImage.getImageView().viewSingleImage(connection, study, 0);
        else if(state.getCurrState() == DisplayState.States.SINGLE_IMAGE) // Single image display state
            MedImage.getImageView().viewSingleImage(connection, study, state.getImageIndex());
        else // Quad image display state
            MedImage.getImageView().viewQuadImage(connection, study, state.getImageIndex());
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label = new javax.swing.JLabel();
        loadButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();
        setDefaultStudyButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        studiesList = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MedImage");

        label.setText("Select Study");

        loadButton.setText("View");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        copyButton.setText("Copy");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        setDefaultStudyButton.setText("Set Default");
        setDefaultStudyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setDefaultStudyButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(studiesList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(loadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(copyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(setDefaultStudyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(backButton))
                    .addComponent(label, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loadButton)
                    .addComponent(backButton)
                    .addComponent(copyButton)
                    .addComponent(setDefaultStudyButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Callback for the back button. Returns to the connections list view.
     * @param evt
     * @see medimage.views.ConnectionsView
     */
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.setVisible(false);
        MedImage.getConnectionsView().setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed
    
    /**
     * Callback for the load button. Loads a study and restores the
     * display state if one exists.
     * @param evt 
     * @see medimage.views.QuadImageView
     * @see medimage.views.SingleImageView
     */
    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        this.setVisible(false);
        
        TreePath path = this.studiesList.getSelectionPath();
        if(path == null || path.getLastPathComponent().equals("Root"))
            return; // No study selected.
        
        Study study = (Study)path.getLastPathComponent();
        
        this.loadStudy(study);
    }//GEN-LAST:event_loadButtonActionPerformed
    
    /**
     * Callback for copy button. Opens the copy view for study copying.
     * @param evt 
     * @see medimage.views.CopyStudyView
     */
    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        TreePath path = this.studiesList.getSelectionPath();
        if(path == null || path.getLastPathComponent().equals("Root"))
            return; // No study selected.
        
        Study study = (Study)path.getLastPathComponent();
        
        // Can only copy to local connection
        Connection[] connections = new Connection[] { new LocalConnection() };
        
        // Create dialog
        CopyStudyView diag = new CopyStudyView(this, study, connections);
        diag.setVisible(true);
        
        // Update when the window closes, in case we copy to the viewed study.
        diag.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosed(WindowEvent e) {
                updateStudiesUI();
            }
        });
    }//GEN-LAST:event_copyButtonActionPerformed
    
    /**
     * Callback for the set default study button. Opens a dialog box for setting
     * the default study.
     * @param evt 
     */
    private void setDefaultStudyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setDefaultStudyButtonActionPerformed
        DefaultStudyView view = new DefaultStudyView(this, connection);
        view.setVisible(true);
    }//GEN-LAST:event_setDefaultStudyButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton copyButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton setDefaultStudyButton;
    private javax.swing.JTree studiesList;
    // End of variables declaration//GEN-END:variables
}
